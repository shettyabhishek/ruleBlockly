/**  
    File name: rulesBlocklyComp.js
    Author: Abhishek H Shekara 
    Description: This file manages the rendering of the rules blockly component and all the 
    relevant actions.
*/
angular.module("rules-blockly-module", []).directive('rulesBlocklyComp',function () {
    return {
        restrict: 'E',
        scope: { 
            //Isolate scope
        },
        replace: true,
        templateUrl: './directive-module/rulesBlocklyComp.html',
        link: function (scope, element, attrs) {
            var xmlList = [];            
            
            //For Dynamically loading the Generic functions -> xmlList will be populated in pullFunctions()
            Blockly.functionsFlyoutCallback = function(workspace) {
                return xmlList;
            };
            scope.blockView = $(".switch input").prop("checked");
            scope.workspace = Blockly.inject('blocklyDiv',{
                media: '../ruleBlockly/node_modules/google-blockly/media/',
                toolbox: document.getElementById('toolbox'),
                trashcan: false
            });          
            scope.workspace.registerToolboxCategoryCallback('GENERIC_FUNCTIONS', Blockly.functionsFlyoutCallback);
            scope.workspace.addChangeListener(function(){
                //For generating js from the blockly view
                if(scope.blockView){
                    var code = Blockly.JavaScript.workspaceToCode(scope.workspace);
                    if(code)
                        document.getElementById('blocklyView').innerHTML =  code;
                    else 
                        document.getElementById('blocklyView').innerHTML =  "<div class='hint-text'>Add blocks in the workspace to generate JavaScript. </div>";    
                } else {
                    var code = Blocklify.JavaScript.Generator.workspaceToCode(scope.workspace);
                    document.getElementById('console').value =  code;
                }
            });            
        },
        controller: function($scope,$timeout){
            //Function to toggle the view 
            $scope.toggleView = function(evt){
                $scope.blockView = $(evt.target).prop("checked");
            }
            $scope.$watch('blockView',function(newVal,oldVal){
                _deleteAllBlocks();
                var sliderText = !newVal ?  'JS to Blocks' : 'Blocks to JS';
                $(".sliderText").text(sliderText);
                $timeout(function(){
                    $scope.$apply();
                    if(!newVal){
                        $(".blocklyToolboxDiv").hide();
                        document.getElementById('console').value =  "var test='test'";
                        $scope.jsToBlocks();
                    } else {
                        $(".blocklyToolboxDiv").show();
                        _deleteAllBlocks();
                    }    
                },1);
            });

            //Function to execute the javascript generated by the blocks
            $scope.runCode = function(){
                var code = Blockly.JavaScript.workspaceToCode($scope.workspace);
                try{
                    if(code)
                        alert(eval(code));
                } catch(ex){alert(ex);}
            }

            //Function to restore the workspace 
            $scope.restore = function(){
                Blockly.mainWorkspace.clear();
                /** 
                $.getJSON("http://localhost:3600/data",function(data){
                    var xml = Blockly.Xml.textToDom(data[0]['blocklyData']);
                    Blockly.Xml.domToWorkspace(Blockly.mainWorkspace,xml);
                    console.log('Restore Successful');
                })
                **/
            }

            //Function to pull the variables 
            $scope.pullVariables = function(){
                var createVariables;
                $.getJSON("./assets/data/input.json", function(data){
                    createVariables = data['JCPenney'];
                    createVariables.forEach(function(varName) {
                        $scope.workspace.createVariable(varName);
                    });    
                });    
            }

            //Function to convert js to blocks
            $scope.jsToBlocks = function(){
                _deleteAllBlocks();
                var javascript_code = document.getElementById('console').value;
                try{
                    var xmlDom = Blocklify.JavaScript.importer.codeToDom(javascript_code, 'atomic');
                    Blockly.Xml.domToWorkspace(xmlDom, $scope.workspace);
                }catch(ex){console.info(ex);}
            }
            /** Private function **/
            _deleteAllBlocks = () => {
                $scope.workspace.getTopBlocks().forEach(function(el){
                    el.dispose();
                });    
            }

            //Function to save the js / xml
            $scope.saveJSXML = function(){
                var obj = {};
                var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
                obj["name"] = "Left Us Function";
                obj["blocklyData"] = Blockly.Xml.domToText(xml);
                obj["jsData"] = Blockly.JavaScript.workspaceToCode(workspace);
                //Blockly.mainWorkspace.clear();
                $.ajax({
                    url: 'http://localhost:3600/storeFunction',
                    type: 'POST',
                    data: JSON.stringify(obj),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    async: false,
                    success: function(msg) {
                    }
                });
            }

            //Function to pull the custom functions    
            $scope.pullFunction = function (){
                var functionList1=[],functionList2=[],functionList3=[];
                $.getJSON("http://localhost:3600/functionData",function(data){
                    data.forEach((obj)=>{
                    if(obj.nofParams === 1)
                        functionList1.push(obj);
                    else if(obj.nofParams === 2)
                        functionList2.push(obj);
                    else
                        functionList3.push(obj);
                    })
            
                    for (var i = 0; i < functionList1.length; i++) {
                        var blockText = '<xml>' +
                        '<block type="avery_functions1">' +
                        '<field name="function_name">' + functionList1[i].name + '</field>' +
                        '<field name="field1">' + functionList1[i].params + '</field>' +
                        '</block>' +
                        '</xml>';
                        var block = Blockly.Xml.textToDom(blockText).firstChild;
                        xmlList.push(block);
                    }
            
                    for (var i = 0; i < functionList2.length; i++) {
                        var paramList = functionList2[i].params.split(',');
                        var blockText = '<xml>' +
                        '<block type="avery_functions2">' +
                        '<field name="function_name">' + functionList2[i].name + '</field>' +
                        '<field name="field1">' + paramList[0] + '</field>' +
                        '<field name="field2">' + paramList[1] + '</field>' +
                        '</block>' +
                        '</xml>';
                        var block = Blockly.Xml.textToDom(blockText).firstChild;
                        xmlList.push(block);
                    }
            
                    for (var i = 0; i < functionList3.length; i++) {
                        var paramList = functionList3[i].params.split(',');
                        var blockText = '<xml>' +
                        '<block type="avery_functions3">' +
                        '<field name="function_name">' + functionList3[i].name + '</field>' +
                        '<field name="field1">' + paramList[0] + '</field>' +
                        '<field name="field2">' + paramList[1] + '</field>' +
                        '<field name="field3">' + paramList[2] + '</field>' +
                        '</block>' +
                        '</xml>';
                        var block = Blockly.Xml.textToDom(blockText).firstChild;
                        xmlList.push(block);
                    }
                });
            }
        }
    }
}).service("rulesBlocklyService",function($timeout){
    
})